CMAKE_MINIMUM_REQUIRED(VERSION 3.18.1 FATAL_ERROR)

PROJECT(Gearoenix)

SET(PROJECT_DESCRIPTION "A cross-platform C++ game engine.")

SET(GX_VERSION_MAJOR 0)
SET(GX_VERSION_MINOR 3) # RTX enabled version
SET(GX_VERSION_PATCH 0)
SET(GX_VERSION "${GX_VERSION_MAJOR}.${GX_VERSION_MINOR}.${GX_VERSION_PATCH}")

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
OPTION(GX_TEST_ENABLED "Enables test units" ON)
# Test coverage
OPTION(GX_COVERAGE_ENABLED "Enables the measurement of test coverages" OFF)

MESSAGE(STATUS "Gearoenix is going to be compiled for ${CMAKE_SYSTEM_NAME}")

SET(GX_SDK_PATH ${CMAKE_SOURCE_DIR}/sdk)
SET(GX_MAIN_ASSETS_PATH ${CMAKE_SOURCE_DIR}/assets)

IF (CMAKE_SYSTEM_NAME MATCHES "Android")
    MESSAGE(STATUS "Building for Android ${ANDROID_ABI}.")
    SET(GX_IN_ANDROID TRUE)
    SET(GX_PLATFORM_SDK_PATH ${GX_SDK_PATH}/android)
    SET(GX_SDK_LIBS_PATH ${GX_PLATFORM_SDK_PATH}/lib/${ANDROID_ABI})
    ADD_LIBRARY(native_app_glue STATIC ${ANDROID_NDK}/sources/android/native_app_glue/android_native_app_glue.c)
    INCLUDE_DIRECTORIES(${ANDROID_NDK}/sources/android/native_app_glue)
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -u ANativeActivity_onCreate")
    ADD_LIBRARY(fmod SHARED IMPORTED)
    SET_TARGET_PROPERTIES(fmod PROPERTIES IMPORTED_LOCATION ${GX_SDK_LIBS_PATH}/libfmod.so)
    SET(GX_COMMON_LIBS ${GX_COMMON_LIBS} android native_app_glue EGL log GLESv3 fmod)
    ADD_DEFINITIONS(-DIMGUI_IMPL_OPENGL_ES3=1)
    SET(CMAKE_CXX_FLAGS "-Ofast ${CMAKE_CXX_FLAGS}")
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Emscripten")
    SET(GX_IN_WASM)
    MESSAGE(STATUS "Building for Emscripten.")
    SET(GX_EMS_FLAGS "-s WASM=1 -s NO_EXIT_RUNTIME=1 -s BINARYEN=1 -s USE_SDL=2")
    SET(GX_EMS_FLAGS "${GX_EMS_FLAGS} --no-heap-copy -Os -s DISABLE_EXCEPTION_CATCHING=0")
    SET(GX_EMS_FLAGS "${GX_EMS_FLAGS} -s INITIAL_MEMORY=268435456 -s ALLOW_MEMORY_GROWTH=1")
    SET(GX_EMS_FLAGS "${GX_EMS_FLAGS} -s MAX_WEBGL_VERSION=2 -s LLD_REPORT_UNDEFINED")
    SET(GX_EMS_FLAGS "${GX_EMS_FLAGS} --preload-file ${CMAKE_SOURCE_DIR}/assets@/")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${GX_EMS_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GX_EMS_FLAGS}")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${GX_EMS_FLAGS}")
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${GX_EMS_FLAGS}")
    SET(CMAKE_EXECUTABLE_SUFFIX .html)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Linux")
    SET(GX_IN_LINUX TRUE)
    SET(GX_PLATFORM_SDK_PATH ${GX_SDK_PATH}/linux)
    SET(GX_SDK_LIBS_PATH ${GX_PLATFORM_SDK_PATH}/lib)
    SET(GX_COMMON_LIBS ${GX_COMMON_LIBS} SDL2 ${GX_SDK_LIBS_PATH}/libfmod.so)
ELSEIF (MSVC)
    SET(GX_IN_WINDOWS TRUE)
    INCLUDE_DIRECTORIES(${GX_STB_INCLUDE_DIRS})
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
    SET(CMAKE_CXX_FLAGS "/std:c++latest /MP /arch:AVX2 /fp:fast /Oi ${CMAKE_CXX_FLAGS}")
    ADD_COMPILE_OPTIONS("$<$<CONFIG:RELEASE>:/Ot>")
    ADD_COMPILE_OPTIONS("$<$<CONFIG:RELEASE>:/Ox>")
    SET(GEAROENIX_EXE_TARGET "WIN32")
    SET(GX_PLATFORM_SDK_PATH ${GX_SDK_PATH}/windows)
    SET(GX_SDK_LIBS_PATH ${GX_PLATFORM_SDK_PATH}/lib)
    SET(GX_COMMON_LIBS
            ${GX_COMMON_LIBS}
            winmm version oleaut32 imm32 setupapi d3d12 dxgi dxguid
            ${GX_SDK_LIBS_PATH}/fmod_vc.lib
            ${GX_SDK_LIBS_PATH}/SDL2-static.lib
            ${GX_SDK_LIBS_PATH}/SDL2main.lib)
ELSEIF (APPLE)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -x objective-c")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -x objective-c++")
    IF (CMAKE_SYSTEM_NAME MATCHES "iOS")
        SET(GX_PLATFORM_SDK_PATH ${GX_SDK_PATH}/ios)
        SET(GX_IN_IOS TRUE)
    ELSE ()
        SET(GX_PLATFORM_SDK_PATH ${GX_SDK_PATH}/macos)
        SET(GX_IN_MACOS TRUE)
    ENDIF ()
    SET(GX_SDK_LIBS_PATH ${GX_PLATFORM_SDK_PATH}/libs)
    SET(GX_COMMON_LIBS ${GX_COMMON_LIBS} iconv)
ENDIF ()

IF (GX_COVERAGE_ENABLED AND GX_TEST_ENABLED)
    MESSAGE(STATUS "Coverage enabled")
    SET(GX_COVERAGE_COMPILER_FLAGS "-fprofile-instr-generate -fcoverage-mapping")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${GX_COVERAGE_COMPILER_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GX_COVERAGE_COMPILER_FLAGS}")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${GX_COVERAGE_COMPILER_FLAGS}")
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${GX_COVERAGE_COMPILER_FLAGS}")
ENDIF ()

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake/)
INCLUDE(gx-compile-lib)
INCLUDE(gx-download-file)
INCLUDE(gx-flag-util)
INCLUDE(gx-imgui)

IF (GX_IN_WINDOWS)
    GX_REPLACE_FLAG(CMAKE_CXX_FLAGS "/W3" "/W4")
ELSE ()
    SET(CMAKE_CXX_FLAGS "-std=c++20 ${CMAKE_CXX_FLAGS}")
ENDIF ()

SET(GX_UNCOMPRESS_TOP_FOLDER FALSE)
GX_DOWNLOAD_FILE("https://github.com/gearoenix/gearoenix-static-files/raw/master/sdk.zip" "${GX_SDK_PATH}")
INCLUDE_DIRECTORIES(${GX_SDK_PATH}/include)
INCLUDE_DIRECTORIES(${GX_PLATFORM_SDK_PATH}/include)

SET(GX_DEBUG_LIBS ${GX_DEBUG_LIBS} ${GX_COMMON_LIBS})
SET(GX_RELEASE_LIBS ${GX_RELEASE_LIBS} ${GX_COMMON_LIBS})

SET(GX_IMGUI_PATH ${GX_SDK_PATH}/include/imgui)
GX_PREPARE_IMGUI(${GX_IMGUI_PATH})
INCLUDE_DIRECTORIES(${GX_IMGUI_PATH})
#INCLUDE_DIRECTORIES(${GX_IMGUI_PATH}/backends)
#INCLUDE_DIRECTORIES(${GX_IMGUI_PATH}/misc/cpp)

ADD_COMPILE_DEFINITIONS("TINYGLTF_USE_CPP14")

SET(GX_DXC_BINARY_DIR "${GX_SDK_PATH}/windows/bin")

ADD_SUBDIRECTORY(gearoenix)
ADD_SUBDIRECTORY(editor)
ADD_SUBDIRECTORY(examples)

GET_FILENAME_COMPONENT(GX_GAME_REALPATH "games" REALPATH)
IF (EXISTS "${GX_GAME_REALPATH}")
    ADD_SUBDIRECTORY(games)
ENDIF ()

IF (GX_TEST_ENABLED)
    ADD_SUBDIRECTORY(tests)
ENDIF (GX_TEST_ENABLED)