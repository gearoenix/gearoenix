SET(GX_ENGINE_METAL_SRC_DIR ${GX_ENGINE_SRC_DIR}/metal)
SET(GX_ENGINE_METAL_SRC
        ${GX_ENGINE_METAL_SRC_DIR}/shaders/gx-mtl-shd-common.hpp
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-buffer.hpp
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-buffer.mm
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-camera.hpp
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-camera.mm
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-engine.hpp
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-engine.mm
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-heap.hpp
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-heap.mm
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-math-helper.hpp
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-mesh.hpp
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-mesh.mm
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-model.hpp
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-model.mm
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-pipeline.hpp
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-pipeline.mm
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-submission.hpp
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-submission.mm
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-texture.hpp
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-texture.mm
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-uploader.hpp
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-uploader.mm
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-vertex.hpp
        ${GX_ENGINE_METAL_SRC_DIR}/gx-mtl-vertex.mm
        PARENT_SCOPE)

SET(GX_METAL_SHADERS_DIR ${GX_ENGINE_METAL_SRC_DIR}/shaders)
SET(GX_METAL_SHADERS_DIR ${GX_METAL_SHADERS_DIR} CACHE INTERNAL "GX_METAL_SHADERS_DIR")

IF (GX_IN_IOS)
    SET(GX_METAL_SHADER_COMPILER_SDK "iphoneos" CACHE INTERNAL "GX_METAL_SHADER_COMPILER_SDK")
ELSE()
    SET(GX_METAL_SHADER_COMPILER_SDK "macosx" CACHE INTERNAL "GX_METAL_SHADER_COMPILER_SDK")
ENDIF(GX_IN_IOS)

FUNCTION(GX_COMPILE_METAL_SHADER GX_METAL_SHADER_FILE GX_CURRENT_TARGET)
    GET_FILENAME_COMPONENT(GX_METAL_SHADER_FILE_NAME_WO_EXT ${GX_METAL_SHADER_FILE} NAME_WLE)
    SET(GX_METAL_SHADER_AIR_PATH ${CMAKE_BINARY_DIR}/${GX_METAL_SHADER_FILE_NAME_WO_EXT}.air)
    SET(GX_METAL_SHADER_INCLUDES ${GX_METAL_SHADERS_DIR}/gx-mtl-shd-common.hpp)
    ADD_CUSTOM_COMMAND(
            TARGET ${GX_CURRENT_TARGET}
            COMMAND xcrun -sdk ${GX_METAL_SHADER_COMPILER_SDK} metal -c ${GX_METAL_SHADER_FILE} -o ${GX_METAL_SHADER_AIR_PATH}
            DEPENDS ${GX_METAL_SHADER_INCLUDES} ${GX_COMPILE_METAL_SHADER}
            COMMENT "Compiling shader ${GX_METAL_SHADER_FILE}..."
            COMMAND_EXPAND_LISTS
            VERBATIM)
    SET_SOURCE_FILES_PROPERTIES(${GX_METAL_SHADER_AIR_PATH} PROPERTIES GENERATED TRUE)
    SET(GX_METAL_SHADER_AIRS ${GX_METAL_SHADER_AIRS} ${GX_METAL_SHADER_AIR_PATH} PARENT_SCOPE)
ENDFUNCTION(GX_COMPILE_METAL_SHADER)

FUNCTION(GX_METAL_PREPARE_TARGET GX_CURRENT_TARGET)
    MESSAGE(STATUS "Preparing target ${GX_CURRENT_TARGET} in Metal render backend.")
    SET(GX_METAL_SHADERS ${GX_METAL_SHADERS_DIR}/gx-mtl-shd-gbuffers-filler.metal)
    FOREACH(GX_METAL_SHADER_FILE ${GX_METAL_SHADERS})
        GX_COMPILE_METAL_SHADER(${GX_METAL_SHADER_FILE} ${GX_CURRENT_TARGET})
    ENDFOREACH()
    SET(GX_METAL_SHADER_LIB_DIR $<TARGET_FILE_DIR:${GX_CURRENT_TARGET}>/assets/shaders)
    SET(GX_METAL_SHADER_LIB_PATH ${GX_METAL_SHADER_LIB_DIR}/all-metal-shaders.metallib)
    ADD_CUSTOM_COMMAND(
            TARGET ${GX_CURRENT_TARGET}
            PRE_BUILD
            COMMAND ${CMAKE_COMMAND} -E make_directory ${GX_METAL_SHADER_LIB_DIR})
    ADD_CUSTOM_COMMAND(
            TARGET ${GX_CURRENT_TARGET}
            COMMAND xcrun -sdk ${GX_METAL_SHADER_COMPILER_SDK} metallib ${GX_METAL_SHADER_AIRS} -o ${GX_METAL_SHADER_LIB_PATH}
            DEPENDS ${GX_METAL_SHADER_AIRS}
            COMMENT "Compiling shader ${GX_METAL_SHADER_LIB_PATH}..."
            COMMAND_EXPAND_LISTS
            VERBATIM)
    SET_SOURCE_FILES_PROPERTIES(${GX_METAL_SHADER_LIB_PATH} PROPERTIES GENERATED TRUE)
    SET(GX_METAL_SHADERS_TARGET "GX_METAL_SHADERS_TARGET_${GX_CURRENT_TARGET}")
    ADD_CUSTOM_TARGET(${GX_METAL_SHADERS_TARGET} ALL DEPENDS ${GX_METAL_SHADER_LIB_PATH})
    ADD_DEPENDENCIES(${GX_CURRENT_TARGET} ${GX_METAL_SHADERS_TARGET})
ENDFUNCTION(GX_METAL_PREPARE_TARGET)