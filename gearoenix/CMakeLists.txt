SET(GX_ENGINE_SRC_DIR ${CMAKE_SOURCE_DIR}/gearoenix)

MESSAGE(STATUS "Gearoenix game engine source directory is ${GX_ENGINE_SRC_DIR}.")

#ADD_SUBDIRECTORY(ai)
ADD_SUBDIRECTORY(audio)
ADD_SUBDIRECTORY(core)
ADD_SUBDIRECTORY(math)
ADD_SUBDIRECTORY(opengl)
ADD_SUBDIRECTORY(physics)
ADD_SUBDIRECTORY(render)
ADD_SUBDIRECTORY(platform)
ADD_SUBDIRECTORY(vulkan)

IF (GX_IN_WINDOWS)
    ADD_SUBDIRECTORY(direct3d)
ELSEIF (APPLE)
    ADD_SUBDIRECTORY(metal)
ENDIF ()

SET(GX_ENGINE_SRC
        ${GX_ENGINE_AI_SRC}
        ${GX_ENGINE_AUDIO_SRC}
        ${GX_ENGINE_CORE_SRC}
        ${GX_ENGINE_D3D_SRC}
        ${GX_ENGINE_MATH_SRC}
        ${GX_ENGINE_METAL_SRC}
        ${GX_ENGINE_OPENGL_SRC}
        ${GX_ENGINE_PHYSICS_SRC}
        ${GX_ENGINE_PLATFORM_SRC}
        ${GX_ENGINE_RENDER_SRC}
        ${GX_ENGINE_VULKAN_SRC})

SET(GX_ENGINE_TEST_SRC
        ${GX_ENGINE_AI_TEST_SRC}
        ${GX_ENGINE_AUDIO_TEST_SRC}
        ${GX_ENGINE_CORE_TEST_SRC}
        ${GX_ENGINE_MATH_TEST_SRC}
        ${GX_ENGINE_PHYSICS_TEST_SRC}
        ${GX_ENGINE_PLATFORM_TEST_SRC}
        ${GX_ENGINE_RENDER_TEST_SRC}
        ${GX_ENGINE_VULKAN_TEST_SRC}
        PARENT_SCOPE)


SOURCE_GROUP(TREE ${GX_ENGINE_SRC_DIR} FILES ${GX_ENGINE_SRC})

SET(GX_ENGINE_IMGUI_SRC
        ${GX_IMGUI_PATH}/imgui.cpp
        ${GX_IMGUI_PATH}/imgui_demo.cpp
        ${GX_IMGUI_PATH}/imgui_draw.cpp
        ${GX_IMGUI_PATH}/imgui_tables.cpp
        ${GX_IMGUI_PATH}/imgui_widgets.cpp
        ${GX_IMGUI_PATH}/backends/imgui_impl_opengl3.cpp
        ${GX_IMGUI_PATH}/backends/imgui_impl_vulkan.cpp
        ${GX_IMGUI_PATH}/misc/cpp/imgui_stdlib.cpp)
SOURCE_GROUP("imgui" FILES ${GX_ENGINE_IMGUI_SRC})
SET(GX_ENGINE_SRC ${GX_ENGINE_SRC} ${GX_ENGINE_IMGUI_SRC})

SET(GX_ENGINE_IMGUI_FB_SRC ${GX_IMGUI_FB_PATH}/ImGuiFileDialog.cpp)
SOURCE_GROUP("imgui-fb" FILES ${GX_ENGINE_IMGUI_FB_SRC})
SET(GX_ENGINE_SRC ${GX_ENGINE_SRC} ${GX_ENGINE_IMGUI_FB_SRC})

ADD_LIBRARY(GearoenixGameEngine STATIC ${GX_ENGINE_SRC})

FOREACH (GX_LIB ${GX_DEBUG_LIBS})
    TARGET_LINK_LIBRARIES(GearoenixGameEngine debug ${GX_LIB})
ENDFOREACH ()

FOREACH (GX_LIB ${GX_RELEASE_LIBS})
    TARGET_LINK_LIBRARIES(GearoenixGameEngine optimized ${GX_LIB})
ENDFOREACH ()

ADD_CUSTOM_TARGET(GearoenixAssets)

IF (GX_IN_WINDOWS)
    GX_D3D_PREPARE_ASSETS()
ENDIF ()

GX_VKR_PREPARE_ASSETS()

FUNCTION(GX_ENGINE_PREPARE_TARGET GX_CURRENT_TARGET)
    MESSAGE(STATUS "Preparing target ${GX_CURRENT_TARGET}")
    GX_VKR_PREPARE_TARGET(${GX_CURRENT_TARGET})
    IF (APPLE)
        GX_METAL_PREPARE_TARGET(${GX_CURRENT_TARGET})
        TARGET_LINK_LIBRARIES(${GX_CURRENT_TARGET} "-framework Metal")
        TARGET_LINK_LIBRARIES(${GX_CURRENT_TARGET} "-framework MetalKit")
        IF (GX_IN_IOS)
            TARGET_LINK_LIBRARIES(${GX_CURRENT_TARGET} "-framework UIKit")
        ELSE (GX_IN_IOS)
            TARGET_LINK_LIBRARIES(${GX_CURRENT_TARGET} "-framework Cocoa")
        ENDIF (GX_IN_IOS)
    ELSEIF (GX_IN_WINDOWS)
        GX_D3D_PREPARE_TARGET(${GX_CURRENT_TARGET})
    ENDIF (APPLE)
    TARGET_LINK_LIBRARIES(${GX_CURRENT_TARGET} GearoenixGameEngine)
    IF (GX_IN_WINDOWS)
        SET(GX_ASSET_DIR $<TARGET_FILE_DIR:${GX_CURRENT_TARGET}>/assets)
        ADD_CUSTOM_COMMAND(
                TARGET ${GX_CURRENT_TARGET} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy_if_different ${GX_SDK_LIBS_PATH}/fmod.dll $<TARGET_FILE_DIR:${GX_CURRENT_TARGET}>)
    ELSEIF (GX_IN_ANDROID)
        SET(GX_ASSET_DIR ${CMAKE_SOURCE_DIR}/android/app/src/main/assets)
    ELSEIF (GX_IN_LINUX)
        SET(GX_ASSET_DIR $<TARGET_FILE_DIR:${GX_CURRENT_TARGET}>/assets)
        ADD_CUSTOM_COMMAND(
                TARGET ${GX_CURRENT_TARGET} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy_if_different ${GX_SDK_LIBS_PATH}/libfmod.so $<TARGET_FILE_DIR:${GX_CURRENT_TARGET}>)
        ADD_CUSTOM_COMMAND(
                TARGET ${GX_CURRENT_TARGET} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy_if_different ${GX_SDK_LIBS_PATH}/libfmod.so.13 $<TARGET_FILE_DIR:${GX_CURRENT_TARGET}>)
        ADD_CUSTOM_COMMAND(
                TARGET ${GX_CURRENT_TARGET} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy_if_different ${GX_SDK_LIBS_PATH}/libfmod.so.13.11 $<TARGET_FILE_DIR:${GX_CURRENT_TARGET}>)
    ENDIF ()
    # In WASM, for now, we have different approach for tha assets.
    IF (NOT GX_IN_WASM)
        ADD_CUSTOM_COMMAND(
                TARGET ${GX_CURRENT_TARGET} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E make_directory ${GX_ASSET_DIR})
        FILE(GLOB GX_ASSET_FILES ${GX_MAIN_ASSETS_PATH}/*)
        FOREACH (GX_ASSET_FILE ${GX_ASSET_FILES})
            ADD_CUSTOM_COMMAND(
                    TARGET ${GX_CURRENT_TARGET} POST_BUILD
                    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${GX_ASSET_FILE} ${GX_ASSET_DIR})
        ENDFOREACH ()
        ADD_DEPENDENCIES(${GX_CURRENT_TARGET} GearoenixAssets)
    ENDIF ()
ENDFUNCTION(GX_ENGINE_PREPARE_TARGET)

SET(GX_ENGINE_SRC_DIR ${GX_ENGINE_SRC_DIR} PARENT_SCOPE)