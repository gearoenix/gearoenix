#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable

#include "../gx-vk-shd-bindings.hpp"
#include "gx-vk-shd-common.glsl"
#include "gx-vk-shd-sampling.glsl"

layout(set = 0, binding = GX_VK_BIND_RAY_TLAS) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = GX_VK_BIND_RAY_OUT_IMAGE, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 0, binding = GX_VK_BIND_RAY_CAMERA) uniform CameraProperties
{
  mat4 view;
  mat4 proj;
  mat4 viewInverse;
  mat4 projInverse;
} cam;

void main()
{
  // Initialize the random number
  uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2       d           = inUV * 2.0 - 1.0;

  vec4 origin    = cam.viewInverse * vec4(0, 0, 0, 1);
  vec4 target    = cam.projInverse * vec4(d.x, d.y, 1, 1);
  vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

  uint  rayFlags = gl_RayFlagsOpaqueEXT;
  float tMin     = 0.001;
  float tMax     = 10000.0;

  prd.hitValue     = vec3(0);
  prd.seed         = seed;
  prd.depth        = 0;
  prd.rayOrigin    = origin.xyz;
  prd.rayDirection = direction.xyz;
  prd.weight       = vec3(0);

  vec3 curWeight = vec3(1);
  vec3 hitValue  = vec3(0);

  for(; prd.depth < 10; prd.depth++)
  {
    traceRayEXT(topLevelAS,        // acceleration structure
                rayFlags,          // rayFlags
                0xFF,              // cullMask
                0,                 // sbtRecordOffset
                0,                 // sbtRecordStride
                0,                 // missIndex
                prd.rayOrigin,     // ray origin
                tMin,              // ray min range
                prd.rayDirection,  // ray direction
                tMax,              // ray max range
                0                  // payload (location = 0)
    );

    hitValue += prd.hitValue * curWeight;
    curWeight *= prd.weight;
  }
  vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, hitValue, 1.0), 1.f));
}
